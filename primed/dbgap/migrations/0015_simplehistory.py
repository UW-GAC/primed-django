# Generated by Django 3.2.13 on 2022-10-07 21:55

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('primed_anvil', '0001_initial'),
        ('anvil_consortium_manager', '0002_account_verification'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dbgap', '0014_alter_dbgapdataaccessrequest_dbgap_current_status'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricaldbGaPWorkspace',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('disease_restriction', models.CharField(blank=True, help_text='The disease restriction if required by data_use_permission.', max_length=255, null=True)),
                ('dbgap_version', models.PositiveIntegerField(help_text='The dbGaP study version associated with this Workspace.', validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_participant_set', models.PositiveIntegerField(help_text='The dbGaP participant set associated with this Workspace.', validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_consent_code', models.PositiveIntegerField(help_text='The numeric code assigned to this consent group by dbGaP', validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_consent_abbreviation', models.CharField(help_text='The consent abbreviation from dbGaP for this study consent group (e.g., GRU-NPU-MDS).', max_length=63)),
                ('data_use_limitations', models.TextField(help_text='The full data use limitations for this workspace.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('data_use_permission', models.ForeignKey(blank=True, db_constraint=False, help_text='The DataUsePermission associated with this study-consent group.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='primed_anvil.datausepermission')),
                ('dbgap_study_accession', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dbgap.dbgapstudyaccession')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='anvil_consortium_manager.workspace')),
            ],
            options={
                'verbose_name': 'historical  dbGaP workspace',
                'verbose_name_plural': 'historical  dbGaP workspaces',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricaldbGaPStudyAccession',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('phs', models.PositiveIntegerField(db_index=True, help_text='The dbGaP study accession integer associated with this workspace (e.g., 7 for phs000007).', validators=[django.core.validators.MinValueValidator(1)])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('study', models.ForeignKey(blank=True, db_constraint=False, help_text='The study associated with this dbGaP study accession.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='primed_anvil.study')),
            ],
            options={
                'verbose_name': 'historical  dbGaP study accession',
                'verbose_name_plural': 'historical  dbGaP study accessions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricaldbGaPDataAccessRequest',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('dbgap_dar_id', models.PositiveIntegerField(db_index=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_version', models.PositiveIntegerField(help_text='The version of the dbGaP study accession that this application grants access to.', validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_participant_set', models.PositiveIntegerField(help_text='The participant set of the dbGaP study accession that this application grants access to.', validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_consent_code', models.PositiveIntegerField(help_text='The numeric code assigned to this consent group by dbGaP', validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_consent_abbreviation', models.CharField(help_text='The abbreviation for this consent group.', max_length=31)),
                ('dbgap_current_status', models.CharField(choices=[('approved', 'Approved'), ('closed', 'Closed'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('new', 'New')], max_length=31)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('dbgap_application', models.ForeignKey(blank=True, db_constraint=False, help_text='The dbGaP application associated with this DAR.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dbgap.dbgapapplication')),
                ('dbgap_study_accession', models.ForeignKey(blank=True, db_constraint=False, help_text='The dbGaP study accession associated with this DAR.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dbgap.dbgapstudyaccession')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical  dbGaP data access request',
                'verbose_name_plural': 'historical  dbGaP data access requests',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricaldbGaPApplication',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('project_id', models.PositiveIntegerField(db_index=True, help_text='The dbGaP-assigned project_id for this application.', validators=[django.core.validators.MinValueValidator(1)])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('principal_investigator', models.ForeignKey(blank=True, db_constraint=False, help_text='The principal investigator associated with on this dbGaP application.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical  dbGaP application',
                'verbose_name_plural': 'historical  dbGaP applications',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
