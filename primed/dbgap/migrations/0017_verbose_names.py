# Generated by Django 3.2.13 on 2022-10-07 23:08

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('primed_anvil', '0001_initial'),
        ('dbgap', '0016_dbgapdataaccessrequest_unique_dbgap_data_access_request'),
    ]

    operations = [
        migrations.AlterField(
            model_name='dbgapapplication',
            name='project_id',
            field=models.PositiveIntegerField(help_text='The dbGaP-assigned project_id for this application.', unique=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP project id'),
        ),
        migrations.AlterField(
            model_name='dbgapdataaccessrequest',
            name='dbgap_application',
            field=models.ForeignKey(help_text='The dbGaP application associated with this DAR.', on_delete=django.db.models.deletion.PROTECT, to='dbgap.dbgapapplication', verbose_name='dbGaP application'),
        ),
        migrations.AlterField(
            model_name='dbgapdataaccessrequest',
            name='dbgap_consent_abbreviation',
            field=models.CharField(help_text='The abbreviation for this consent group.', max_length=31, verbose_name=' dbGaP consent abbreviation'),
        ),
        migrations.AlterField(
            model_name='dbgapdataaccessrequest',
            name='dbgap_consent_code',
            field=models.PositiveIntegerField(help_text='The numeric code assigned to this consent group by dbGaP', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP consent code'),
        ),
        migrations.AlterField(
            model_name='dbgapdataaccessrequest',
            name='dbgap_current_status',
            field=models.CharField(choices=[('approved', 'Approved'), ('closed', 'Closed'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('new', 'New')], max_length=31, verbose_name=' dbGaP current status'),
        ),
        migrations.AlterField(
            model_name='dbgapdataaccessrequest',
            name='dbgap_dar_id',
            field=models.PositiveIntegerField(unique=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP DAR id'),
        ),
        migrations.AlterField(
            model_name='dbgapdataaccessrequest',
            name='dbgap_participant_set',
            field=models.PositiveIntegerField(help_text='The original participant set of the dbGaP study accession that this application grants access to.', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP participant set'),
        ),
        migrations.AlterField(
            model_name='dbgapdataaccessrequest',
            name='dbgap_study_accession',
            field=models.ForeignKey(help_text='The dbGaP study accession associated with this DAR.', on_delete=django.db.models.deletion.PROTECT, to='dbgap.dbgapstudyaccession', verbose_name=' dbGaP study accession'),
        ),
        migrations.AlterField(
            model_name='dbgapdataaccessrequest',
            name='dbgap_version',
            field=models.PositiveIntegerField(help_text='The original version of the dbGaP study accession that this application grants access to.', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP version'),
        ),
        migrations.AlterField(
            model_name='dbgapstudyaccession',
            name='phs',
            field=models.PositiveIntegerField(help_text='The dbGaP study accession integer associated with this workspace (e.g., 7 for phs000007).', unique=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name=' phs'),
        ),
        migrations.AlterField(
            model_name='dbgapstudyaccession',
            name='study',
            field=models.ForeignKey(help_text='The study associated with this dbGaP study accession.', on_delete=django.db.models.deletion.PROTECT, to='primed_anvil.study', verbose_name='study'),
        ),
        migrations.AlterField(
            model_name='dbgapworkspace',
            name='dbgap_consent_abbreviation',
            field=models.CharField(help_text='The consent abbreviation from dbGaP for this study consent group (e.g., GRU-NPU-MDS).', max_length=63, verbose_name=' dbGaP consent abbreviation'),
        ),
        migrations.AlterField(
            model_name='dbgapworkspace',
            name='dbgap_consent_code',
            field=models.PositiveIntegerField(help_text='The numeric code assigned to this consent group by dbGaP', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP consent code'),
        ),
        migrations.AlterField(
            model_name='dbgapworkspace',
            name='dbgap_participant_set',
            field=models.PositiveIntegerField(help_text='The dbGaP participant set associated with this Workspace.', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP participant set'),
        ),
        migrations.AlterField(
            model_name='dbgapworkspace',
            name='dbgap_study_accession',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbgap.dbgapstudyaccession', verbose_name=' dbGaP study accession'),
        ),
        migrations.AlterField(
            model_name='dbgapworkspace',
            name='dbgap_version',
            field=models.PositiveIntegerField(help_text='The dbGaP study version associated with this Workspace.', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP version'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapapplication',
            name='project_id',
            field=models.PositiveIntegerField(db_index=True, help_text='The dbGaP-assigned project_id for this application.', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP project id'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapdataaccessrequest',
            name='dbgap_application',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The dbGaP application associated with this DAR.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dbgap.dbgapapplication', verbose_name='dbGaP application'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapdataaccessrequest',
            name='dbgap_consent_abbreviation',
            field=models.CharField(help_text='The abbreviation for this consent group.', max_length=31, verbose_name=' dbGaP consent abbreviation'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapdataaccessrequest',
            name='dbgap_consent_code',
            field=models.PositiveIntegerField(help_text='The numeric code assigned to this consent group by dbGaP', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP consent code'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapdataaccessrequest',
            name='dbgap_current_status',
            field=models.CharField(choices=[('approved', 'Approved'), ('closed', 'Closed'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('new', 'New')], max_length=31, verbose_name=' dbGaP current status'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapdataaccessrequest',
            name='dbgap_dar_id',
            field=models.PositiveIntegerField(db_index=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP DAR id'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapdataaccessrequest',
            name='dbgap_participant_set',
            field=models.PositiveIntegerField(help_text='The original participant set of the dbGaP study accession that this application grants access to.', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP participant set'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapdataaccessrequest',
            name='dbgap_study_accession',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The dbGaP study accession associated with this DAR.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dbgap.dbgapstudyaccession', verbose_name=' dbGaP study accession'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapdataaccessrequest',
            name='dbgap_version',
            field=models.PositiveIntegerField(help_text='The original version of the dbGaP study accession that this application grants access to.', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP version'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapstudyaccession',
            name='phs',
            field=models.PositiveIntegerField(db_index=True, help_text='The dbGaP study accession integer associated with this workspace (e.g., 7 for phs000007).', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' phs'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapstudyaccession',
            name='study',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The study associated with this dbGaP study accession.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='primed_anvil.study', verbose_name='study'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapworkspace',
            name='dbgap_consent_abbreviation',
            field=models.CharField(help_text='The consent abbreviation from dbGaP for this study consent group (e.g., GRU-NPU-MDS).', max_length=63, verbose_name=' dbGaP consent abbreviation'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapworkspace',
            name='dbgap_consent_code',
            field=models.PositiveIntegerField(help_text='The numeric code assigned to this consent group by dbGaP', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP consent code'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapworkspace',
            name='dbgap_participant_set',
            field=models.PositiveIntegerField(help_text='The dbGaP participant set associated with this Workspace.', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP participant set'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapworkspace',
            name='dbgap_study_accession',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dbgap.dbgapstudyaccession', verbose_name=' dbGaP study accession'),
        ),
        migrations.AlterField(
            model_name='historicaldbgapworkspace',
            name='dbgap_version',
            field=models.PositiveIntegerField(help_text='The dbGaP study version associated with this Workspace.', validators=[django.core.validators.MinValueValidator(1)], verbose_name=' dbGaP version'),
        ),
    ]
