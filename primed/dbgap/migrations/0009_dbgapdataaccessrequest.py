# Generated by Django 3.2.13 on 2022-10-03 22:42

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('dbgap', '0008_dbgapapplication'),
    ]

    operations = [
        migrations.CreateModel(
            name='dbGaPDataAccessRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('dbgap_dar_id', models.PositiveIntegerField(unique=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_version', models.PositiveIntegerField(help_text='The version of the dbGaP study accession that this application grants access to.', validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_participant_set', models.PositiveIntegerField(help_text='The participant set of the dbGaP study accession that this application grants access to.', validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_consent_code', models.PositiveIntegerField(help_text='The numeric code assigned to this consent group by dbGaP', validators=[django.core.validators.MinValueValidator(1)])),
                ('dbgap_consent_abbreviation', models.CharField(help_text='The abbreviation for this consent group.', max_length=31)),
                ('dbgap_application', models.ForeignKey(help_text='The dbGaP application associated with this DAR.', on_delete=django.db.models.deletion.PROTECT, to='dbgap.dbgapapplication')),
                ('dbgap_study_accession', models.ForeignKey(help_text='The dbGaP study accession associated with this DAR.', on_delete=django.db.models.deletion.PROTECT, to='dbgap.dbgapstudyaccession')),
            ],
            options={
                'verbose_name': ' dbGaP data access request',
            },
        ),
    ]
