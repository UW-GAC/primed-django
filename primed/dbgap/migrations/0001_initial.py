# Generated by Django 3.2.13 on 2022-09-28 22:45

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('anvil_consortium_manager', '0002_account_verification'),
        ('primed_anvil', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='dbGaPWorkspace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('disease_restriction', models.CharField(blank=True, help_text='The disease restriction if required by data_use_permission.', max_length=255, null=True)),
                ('full_consent_code', models.CharField(help_text='The full consent code from dbGaP for this study consent group (e.g., GRU-NPU-MDS).', max_length=63)),
                ('data_use_limitations', models.TextField(help_text='The full data use limitations for this workspace.')),
                ('phs', models.PositiveIntegerField(help_text='The dbGaP study accession associated with this workspace (e.g., phs000007).', validators=[django.core.validators.MinValueValidator(1)])),
                ('version', models.PositiveIntegerField(help_text='The dbGaP study version associated with this Workspace.', validators=[django.core.validators.MinValueValidator(1)])),
                ('participant_set', models.PositiveIntegerField(help_text='The dbGaP participant set associated with this Workspace.', validators=[django.core.validators.MinValueValidator(1)])),
                ('data_use_modifiers', models.ManyToManyField(blank=True, help_text='The DataUseModifiers associated with this study-consent group.', to='primed_anvil.DataUseModifier')),
                ('data_use_permission', models.ForeignKey(help_text='The DataUsePermission associated with this study-consent group.', on_delete=django.db.models.deletion.PROTECT, to='primed_anvil.datausepermission')),
                ('study', models.ForeignKey(help_text='The Study associated with this Workspace.', on_delete=django.db.models.deletion.PROTECT, to='primed_anvil.study')),
                ('workspace', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='anvil_consortium_manager.workspace')),
            ],
            options={
                'verbose_name': ' dbGaP workspace',
                'verbose_name_plural': ' dbGaP workspaces',
            },
        ),
        migrations.AddConstraint(
            model_name='dbgapworkspace',
            constraint=models.UniqueConstraint(fields=('study', 'phs', 'version'), name='unique_dbgap_workspace'),
        ),
    ]
